# heading labels for charts
heading <- c('fixed acidity',
'volatile acidity',
'citric acid',
'residual sugar',
'chlorides',
'free sulfur dioxide',
'total sulfur dioxide',
'density',
'pH',
'sulphates',
'alcohol',
'quality')
# dataset to crunch on this run
d <- whitetest
#d <- whitecomplete
#d <- redcomplete
# common name for this run
output_fn <- "whitetest"
#output_fn <- "whitecomplete"
#output_fn <- "redcomplete"
# drop any wines that have any missing lab data
d <- na.omit(d)
# transform all data to a mean of 0 with 1 standard deviation
scaled.dat <- scale(d)
d <- scaled.dat
d
v <- c("kfold", 5)
MR <- mining(quality~., d, model="mr", Runs=10, method=v)
library(rminer) # load the rminer library
# 99 white wines testing set
whitetest <- read.table("winequality-white-t.csv",sep=";",header=TRUE)
# 4898 different white wines
whitecomplete <- read.table("winequality-white.csv",sep=';', header=TRUE)
redcomplete <- read.table("winequality-red.csv",sep=";",header=TRUE)
# heading labels for charts
heading <- c('fixed acidity',
'volatile acidity',
'residual sugar',
'chlorides',
'free sulfur dioxide',
'total sulfur dioxide',
'pH',
'sulphates',
'alcohol',
'quality')
d <- whitetest
#d <- whitecomplete
#d <- redcomplete
# common name for this run
output_fn <- "whitetest"
#output_fn <- "whitecomplete"
# 1599 different red wines
'density',
#output_fn <- "redcomplete"
# drop any wines that have any missing lab data
'citric acid',
#setseed(1337)
# dataset to crunch on this run
d <- na.omit(d)
v <- c("kfold", 5)
MR <- mining(quality~., d, model="mr", Runs=10, method=v)
d <- na.omit(d)
# transform all data to a mean of 0 with 1 standard deviation
scaled.dat <- scale(d)
d <- scaled.dat
m <- c(3, 100, "kfold", 4, "RAE")
s <- seq(1, 6, 1)
#NN <- mining(quality~., d, Runs=10, method=c("kfold",3),model='dt')
NN=mining(quality~., d, model='mlpe', Runs=10, method=v, mpar=m, search=s, feat="s")
savemining(NN, paste(output_fn, "-ann",sep=""));
m <- c( NA, NA, "kfold", 4, "RAE")
# Sigma hyperparameter for SVM, S { 2^3, 2^2, ... 2^(-15) }
s <- 2 ^ seq(-15, 3, 2)
SV <- mining(quality~., d, model="svm", Runs=20, method=v, mpar=m, search=s, feat="s")
# no need to do this since rminer handles standard deviation for you
library(rminer) # load the rminer library
#setseed(1337)
whitetest <- read.table("winequality-white-t.csv",sep=";",header=TRUE)
# 4898 different white wines
whitecomplete <- read.table("winequality-white.csv",sep=';', header=TRUE)
# heading labels for charts
heading <- c('fixed acidity',
'citric acid',
'residual sugar',
'chlorides',
'free sulfur dioxide',
'density',
'total sulfur dioxide',
# 1599 different red wines
'pH',
'sulphates',
'quality')
redcomplete <- read.table("winequality-red.csv",sep=";",header=TRUE)
'alcohol',
'volatile acidity',
# 99 white wines testing set
library(rminer) # load the rminer library
#setseed(1337)
# 99 white wines testing set
whitetest <- read.table("winequality-white-t.csv",sep=";",header=TRUE)
# 4898 different white wines
whitecomplete <- read.table("winequality-white.csv",sep=';', header=TRUE)
# 1599 different red wines
redcomplete <- read.table("winequality-red.csv",sep=";",header=TRUE)
# heading labels for charts
library(rminer) # load the rminer library
#setseed(1337)
# 99 white wines testing set
whitetest <- read.table("winequality-white-t.csv",sep=";",header=TRUE)
# 4898 different white wines
whitecomplete <- read.table("winequality-white.csv",sep=';', header=TRUE)
# 1599 different red wines
redcomplete <- read.table("winequality-red.csv",sep=";",header=TRUE)
# heading labels for charts
heading <- c('fixed acidity',
'volatile acidity',
'citric acid',
'residual sugar',
'chlorides',
'free sulfur dioxide',
'total sulfur dioxide',
'density',
'pH',
'sulphates',
'alcohol',
'quality')
# dataset to crunch on this run
d <- whitetest
#d <- whitecomplete
#d <- redcomplete
# common name for this run
output_fn <- "whitetest"
#output_fn <- "whitecomplete"
#output_fn <- "redcomplete"
# drop any wines that have any missing lab data
d <- na.omit(d)
# transform all data to a mean of 0 with 1 standard deviation
#colMeans(scaled.dat)
#apply(scaled.dat, 2, sd)
#scaled.dat
# no need to do this since rminer handles standard deviation for you
# 10 runs of 5-fold, multiple linear regression
v <- c("kfold", 5)
MR <- mining(quality~., d, model="mr", Runs=10, method=v)
savemining(MR, paste(output_fn, "-mr",sep=""));
# Artificial Neural Network
print(t.test(mmetric(NN,metric="RAE"), mmetric(SV,metric="RAE")))
loadmining("winequality-svm")
SV <- loadmining("winecomplete-svm")
setwd("~/GitHub/CS673")
SV <- loadmining("whitecomplete-svm")
SV <- loadmining(c(datafiles, "-svm")
SV <- loadmining(c(datafiles, "-svm"))
SV <- loadmining(c(datafiles, "-svm"))
datafiles <- "whitecomplete"
SV <- loadmining(c(datafiles, "-svm"))
datafiles
SV <- loadmining(paste(datafiles, "-svm", sep=""))
# reload test data so we dont have to crunch this again
#datafiles <- "redcomplete"
#datafiles <- "whitetest"
datafiles <- "whitecomplete"
SV <- loadmining(paste(datafiles, "-svm", sep=""))
NN <- loadmining(paste(datafiles, "-nn", sep=""))
MR <- loadmining(paste(datafiles, "-mr", sep=""))
NN <- loadmining(paste(datafiles, "-ann", sep=""))
print(output_fn)
print(t.test(mmetric(NN,metric="RAE"), mmetric(SV,metric="RAE")))
print(meanint(mmetric(SV,metric="RAE")))
print(t.test(mmetric(NN,metric="RAE"), mmetric(SV,metric="RAE"), mmetric(MR,metric="RAE")))
NN
M <- vector('list',3)
M[[1]] <- SV
M[[2]] <- NN
M[[3]] <- MR
mgraph(M,graph="REC",leg=c("Support Vector Machine","Artificial Neural Network","Multiple Regression"), xval=15000)
datafiles <- "redcomplete"
#datafiles <- "whitetest"
#datafiles <- "whitecomplete"
SV <- loadmining(paste(datafiles, "-svm", sep=""))
NN <- loadmining(paste(datafiles, "-ann", sep=""))
MR <- loadmining(paste(datafiles, "-mr", sep=""))
SV <- loadmining(paste(datafiles, "-svm", sep=""))
d <- redcomplete
output_fn <- "redcomplete"
d <- na.omit(d)
m <- c(3, 100, "kfold", 4, "RAE")
s <- seq(1, 6, 1)
#NN <- mining(quality~., d, Runs=10, method=c("kfold",3),model='dt')
NN=mining(quality~., d, model='mlpe', Runs=10, method=v, mpar=m, search=s, feat="s")
savemining(NN, paste(output_fn, "-nn",sep=""))
ANN=mining(quality~.d, model='mlp', search=10)
ANN=mining(quality~.,d, model='mlp', search=10)
savemining(ANN, paste(output_fn, "-ann", sep=""))
ANN
ANN=mining(quality~.,d, model='mlp', search=c(1,2,3,4,5))
ANN
ANN=mining(quality~.,d, model='mlp', search=10)
savemining(ANN, paste(output_fn, "-ann", sep=""))
datafiles <- "redcomplete"
#datafiles <- "whitetest"
#datafiles <- "whitecomplete"
SV <- loadmining(paste(datafiles, "-svm", sep=""))
NN <- loadmining(paste(datafiles, "-ann", sep=""))
SV <- loadmining(paste(datafiles, "-svm", sep=""))
datafiles <- "whitecomplete"
SV <- loadmining(paste(datafiles, "-svm", sep=""))
NN <- loadmining(paste(datafiles, "-ann", sep=""))
MR <- loadmining(paste(datafiles, "-mr", sep=""))
SV
view(SV)
View(SV)
head(SV)
SV$time
SV$time
SV$model
PNN <- predict(NN, ts)
ts <- read.table(d)
ts <- read.table(NN, paste(datafiles,"-ann", sep=""))
datafiles <- "whitecomplete"
ts <- read.table(NN, paste(datafiles,"-ann", sep=""))
NN <- loadmining(paste(datafiles, "-ann", sep=""))
ts <- read.table(NN, paste(datafiles,"-ann", sep=""))
PSV <- read.table(NN, paste(datafiles,"-ann", sep=""))
datafiles
PSV <- read.table(NN, paste(datafiles,"-ann", sep=""))
PSV <- predit(NN, paste(datafiles,"-ann", sep=""))
PSV <- predict(NN, paste(datafiles,"-ann", sep=""))
NN <- loadmining(paste(datafiles, "-ann", sep=""))
PSV <- predict(NN, paste(datafiles,"-ann", sep=""))
PNN <- predict(NN, whitecomplete)
whitecomplete
PNN <- predict(NN, whitecomplete)
datafiles <- "whitecomplete"
SV <- loadmining(paste(datafiles, "-svm", sep=""))
NN <- loadmining(paste(datafiles, "-ann", sep=""))
MR <- loadmining(paste(datafiles, "-mr", sep=""))
PNN <- predict(NN, whitecomplete)
SV
PNN <- predict(NN, whitecomplete)
PNN
PNN <- predict(NN, whitecomplete)
datafiles <- "redcomplete"
SV <- loadmining(paste(datafiles, "-svm", sep=""))
NN <- loadmining(paste(datafiles, "-ann", sep=""))
SV <- loadmining(paste(datafiles, "-svm", sep=""))
NN <- loadmining(paste(datafiles, "-ann", sep=""))
MR <- loadmining(paste(datafiles, "-mr", sep=""))
m <- c( NA, NA, "kfold", 4, "RAE")
# Sigma hyperparameter for SVM, S { 2^3, 2^2, ... 2^(-15) }
s <- 2 ^ seq(-15, 3, 2)
SV <- mining(quality~., d, model="svm", Runs=20, method=v, mpar=m, search=s, feat="s")
SV <- loadmodel(paste(datafiles, "-svm", sep=""))
savemining(MR, paste(output_fn, "-svm",sep=""));
savemining(SV, paste(output_fn, "-svm",sep=""));
SV <- loadminin(paste(datafiles, "-svm", sep=""))
NN <- loadmodel(paste(datafiles, "-ann", sep=""))
PNN <- predict(NN, whitecomplete)
PNN <- predict(NN, redcomplete)
NN
M <- fit(quality~., whitetest, model="lr")
P <- predict(M, whitetest)
print(mmetric(whitetest$quality, P, "CONF"))
P
print(mmetric(whitetest$quality, P, "CONF"))
M <- fit(quality~., whitetest, model="svm")
P <- predict(M, whitetest)
print(mmetric(whitetest$quality, P, "CONF"))
M <- fit(quality~., whitetest, model="svm", search="heuristic")
M <- fit(quality~., whitetest, model="svm", search="heuristic")
P <- predict(M, whitetest)
print(mmetric(whitetest$quality, P, "CONF"))
print(mmetric(whitetest$quality, P, "AUC"))
whitetest
view(whitetest)
View(whitetest)
data(sin1reg)
M=fit(y~., data=sin1reg, model="svm", search="heuristic")
P <- predict(M, sin1reg)
print(mmetric(sin1reg$y, P, "MAE"))
mgraph(sin1reg$y, P, graph="REC", Grid=10)
mgraph(sin1reg$y, P, graph="REC", Grid=1)
mgraph(sin1reg$y, P, graph="REC", Grid=10)
View(sin1reg)
### simple classification example.
data(iris)
M=fit(Species~.,iris,model="dt")
P=predict(M,iris)
print(mmetric(iris$Species,P,"CONF"))
print(mmetric(iris$Species,P,"ACC"))
print(mmetric(iris$Species,P,"AUC"))
print(mmetric(iris$Species,P,"ALL"))
mgraph(iris$Species,P,graph="ROC",TC=2,main="versicolor ROC",
baseline=TRUE,leg="Versicolor",Grid=10)
### classification example with hyperparameter selection
# SVM
M=fit(Species~.,iris,model="svm",search=2^-3,mpar=c(3)) # C=3, gamma=2^-3
print(M@mpar) # gamma, C, epsilon (not used here)
M=fit(Species~.,iris,model="svm",search="heuristic10") # 10 grid search for gamma
print(M@mpar) # gamma, C, epsilon (not used here)
M=fit(Species~.,iris,model="svm",search="heuristic10") # 10 grid search for gamma
print(M@mpar) # gamma, C, epsilon (not used here)
M=fit(Species~.,iris,model="svm",search=2^seq(-15,3,2),
mpar=c(NA,NA,"holdout",2/3,"AUC")) # same 0 grid search for gamma
print(M@mpar) # gamma, C, epsilon (not used here)
search=svmgrid(task="prob") # grid search as suggested by the libsvm authors
M=fit(Species~.,iris,model="svm",search=search) #
print(M@mpar) # gamma, C, epsilon (not used here)
M=fit(Species~.,iris,model="svm",search="UD") # 2 level 13 point uniform-design
print(M@mpar) # gamma, C, epsilon (not used here)
# MLPE
M=fit(Species~.,iris,model="mlpe",search="heuristic5") # 5 grid search for H
print(M@mpar)
M=fit(Species~.,iris,model="mlpe",search="heuristic5",
mpar=c(3,100,"kfold",3,"AUC",2)) # 5 grid search for decay, inner 3-fold
print(M@mpar)
NN=mining(quality~., d, model='mlpe', Runs=10, method=v, mpar=m, search=s, feat="s", scale="none")
View(d)
### regression example with mining
data(sin1reg)
M1=mining(y~.,sin1reg[,c(1,2,4)],model="mr",Runs=5)
M2=mining(y~.,sin1reg[,c(1,2,4)],model="mlpe",
mpar=c(3,50),search=4,Runs=5,feature="simp")
L=vector("list",2); L[[1]]=M2; L[[2]]=M1
mgraph(L,graph="REC",xval=0.1,leg=c("mlpe","mr"),main="REC curve")
## 3rd example, use of naive method (most common class)
M=mining(Species~.,iris,Runs=1,method=c("kfold",3),model="naive")
print(mmetric(M,metric="CONF"))
data(iris)
M=fit(Species~.,iris,model="lr")
P=predict(M,iris)
print(mmetric(iris$Species,P,"CONF")) # confusion matrix
print(mmetric(d$quality, P, "CONF"))
P <- predict(NN, d)
M <- fit(quality~., d, model="svm", Runs=20, method=v, mpar=m, search=s)
P <- predict(M, d)
print(mmetric(d$quality, P, "CONF"))
M <- fit(quality~., d, model="lr")
P <- predict(M, d)
print(mmetric(d$quality, P, "CONF"))
print(mmetric(quality$d, P, "CONF"))
$
print(mmetric(d$quality, P, "CONF"))
print(mmetric(d, P, "CONF"))
datafiles <- "redcomplete"
SV <- loadmining(paste(datafiles, "-svm", sep=""))
NN <- loadmining(paste(datafiles, "-ann", sep=""))
MR <- loadmining(paste(datafiles, "-mr", sep=""))
M <- fit(quality~., NN, model="mple")
P <- predict(NN, redcomplete)
P <- predict(redcomplete, NN)
SV <- loadmining(paste(datafiles, "-svm", sep=""))
NN <- loadmining(paste(datafiles, "-ann", sep=""))
MR <- loadmining(paste(datafiles, "-mr", sep=""))
savemodel(SV, paste(datafiles,"mr","model", sep="-"))
savemodel(SV, paste(datafiles,"svm","model", sep="-"))
savemodel(NN, paste(datafiles,"nn","model", sep="-"))
savemodel(MR, paste(datafiles,"mr","model", sep="-"))
MSV <- loadmodel(paste(datafiles,"svm","model", sep="-"))
M <- fit(quality~., MSV, model="mple")
M <- fit(quality~., MSV, model="lr")
M <- fit(quality~., MSV, model="mr")
M <- fit(quality~., NN, model="mple")
MSV <- loadmodel(paste(datafiles,"svm","model", sep="-"))
MNN <- loadmodel(paste(datafiles,"nn","model", sep="-"))
MSV <- loadmodel(paste(datafiles,"mr","model", sep="-"))
M <- fit(quality~., MNN, model="mple")
M
NN
names(NN)
NN$error
SV$error
MR$error
MR <- mining(quality~., d, model="mr", Runs=10, method=v, feat="s")
MR$error
SV <- loadmining(paste(datafiles, "-svm", sep=""))
NN <- loadmining(paste(datafiles, "-ann", sep=""))
MR <- loadmining(paste(datafiles, "-mr", sep=""))
SV$error
SV$pred
mgraph(M$error)
barplot(M$error)
M
print(M[[1]]$error)
print(SV$error)
print(SV$time)
print(NN$time)
print(MR$time)
mgraph(M,graph="REC",leg=c("Support Vector Machine","Artificial Neural Network","Multiple Regression"), xval=15000)
avg(1,2,3,4)
mean(1,2,3,4)
mean(c(1,2,3,4,5))
mean(c(SV$time))
mean(c(SV$time),c(NN$time),c(MR$time))
print(mean(c(SV$time),mean(c(NN$time)),mean(c(MR$time))))
print(cat(mean(c(SV$time),mean(c(NN$time)),mean(c(MR$time)))))
print(paste(mean(c(SV$time),mean(c(NN$time)),mean(c(MR$time)))),sep=" ")
print(paste(mean(c(SV$time)),mean(c(NN$time)),mean(c(MR$time)))),sep=" ")
print(paste(mean(c(SV$time)),mean(c(NN$time)),mean(c(MR$time)), sep=" "))
print(c(1,2,3,4))
print(c(mean(c(SV$time)),mean(c(NN$time)),mean(c(MR$time))))
mat <- matrix(nrow=2,ncol=3,c(avtime_head,avtime))
avtime_head <- c("SVM", "NN", "MR")
avtime <- c(mean(c(SV$time)),mean(c(NN$time)),mean(c(MR$time)))
mat <- matrix(nrow=2,ncol=3,c(avtime_head,avtime))
summary(mat)
mat <- matrix(nrow=2,ncol=3,c(avtime_head), c(avtime))
summary(mat)
mat <- matrix(nrow=2,ncol=3,c(avtime_head, avtime))
summary(mat)
avtime <- data.frame(c(mean(c(SV$time)),mean(c(NN$time)),mean(c(MR$time))), avgtime_head)
avtime_head <- c("SVM", "NN", "MR")
avtime <- data.frame(c(mean(c(SV$time)),mean(c(NN$time)),mean(c(MR$time))), avgtime_head)
avtime_head <- c("SVM", "NN", "MR")
avtime <- data.frame(c(mean(c(SV$time)),mean(c(NN$time)),mean(c(MR$time))), avtime_head)
names(avtime)
class(avtime
class(avtime)
class(avtime)
avtime
avtime <- c(SV$time)),mean(c(NN$time)),mean(c(MR$time))
avtime <- print(c(SV$time)),mean(c(NN$time)),mean(c(MR$time)))
summary(NN)
summary(NN$mpar)
View(d)
library(rminer) # load the rminer library
#setseed(1337)
# 99 white wines testing set
whitetest <- read.table("winequality-white-t.csv",sep=";",header=TRUE)
# 4898 different white wines
whitecomplete <- read.table("winequality-white.csv",sep=';', header=TRUE)
# 1599 different red wines
redcomplete <- read.table("winequality-red.csv",sep=";",header=TRUE)
# heading labels for charts
heading <- c('fixed acidity',
'volatile acidity',
'citric acid',
'residual sugar',
'chlorides',
'free sulfur dioxide',
'total sulfur dioxide',
'density',
'pH',
'sulphates',
'alcohol',
'quality')
# dataset to crunch on this run
#d <- whitetest
#d <- whitecomplete
d <- redcomplete
# 10 runs of 5-fold, multiple linear regression
v <- c("kfold", 5)
MR <- mining(quality~., d, model="mr", Runs=20, method=v)
savemining(MR, paste(output_fn, "-mr",sep=""));
# Artificial Neural Network
m <- c(3, 100, "kfold", 4, "RAE")
s <- seq(1, 6, 1)
NN=mining(quality~., d, model='mlpe', Runs=20, method=v, mpar=m, search=s, feat="s")
savemining(NN, paste(output_fn, "-nn",sep=""))
# ANN with 10 hidden nodes
ANN=mining(quality~.,d, model='mlp', search=10)
savemining(ANN, paste(output_fn, "-ann", sep=""))
# Support Vector Machine
# m <- (C, epsilon, vmethod, vpar, metric)
m <- c( NA, NA, "kfold", 4, "RAE")
# Sigma hyperparameter for SVM, S { 2^3, 2^2, ... 2^(-15) }
s <- 2 ^ seq(-15, 3, 2)
SV <- mining(quality~., d, model="svm", Runs=20, method=v, mpar=m, search=s, feat="s")
savemining(SV, paste(output_fn, "-svm",sep=""));
savemining(SV, paste(output_fn, "-svm",sep=""));
output_fn <- "redcomplete"
savemining(MR, paste(output_fn, "-mr",sep=""));
savemining(NN, paste(output_fn, "-nn",sep=""))
savemining(ANN, paste(output_fn, "-ann", sep=""))
savemining(SV, paste(output_fn, "-svm",sep=""));
d <- whitecomplete
output_fn <- "whitecomplete"
# drop any wines that have any missing lab data
d <- na.omit(d)
# transform all data to a mean of 0 with 1 standard deviation
#colMeans(scaled.dat)
#apply(scaled.dat, 2, sd)
#scaled.dat
# no need to do this since rminer handles standard deviation for you
# 10 runs of 5-fold, multiple linear regression
v <- c("kfold", 5)
MR <- mining(quality~., d, model="mr", Runs=20, method=v)
savemining(MR, paste(output_fn, "-mr",sep=""));
# Artificial Neural Network
m <- c(3, 100, "kfold", 4, "RAE")
s <- seq(1, 6, 1)
NN=mining(quality~., d, model='mlpe', Runs=20, method=v, mpar=m, search=s, feat="s")
savemining(NN, paste(output_fn, "-nn",sep=""))
# ANN with 10 hidden nodes
ANN=mining(quality~.,d, model='mlp', search=10)
savemining(ANN, paste(output_fn, "-ann", sep=""))
# Support Vector Machine
# m <- (C, epsilon, vmethod, vpar, metric)
m <- c( NA, NA, "kfold", 4, "RAE")
# Sigma hyperparameter for SVM, S { 2^3, 2^2, ... 2^(-15) }
s <- 2 ^ seq(-15, 3, 2)
SV <- mining(quality~., d, model="svm", Runs=20, method=v, mpar=m, search=s, feat="s")
savemining(SV, paste(output_fn, "-svm",sep=""));
print("Avg Elapsed Time")
avtime_head <- c("SVM", "NN", "MR")
avtime <- print(c(SV$time)),mean(c(NN$time)),mean(c(MR$time))
avtime <- print(c(mean(SV$time),mean(c(NN$time)),mean(c(MR$time))
avtime <- print(c(mean(SV$time),mean(c(NN$time)),mean(c(MR$time)))
avtime <- print(c(mean(SV$time),mean(c(NN$time)),mean(c(MR$time)))
avtime <- print(c(mean(SV$time),mean(c(NN$time)),mean(c(MR$time))))
print(c(mean(SV$time),mean(c(NN$time)),mean(c(MR$time))))
